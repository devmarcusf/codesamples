version: "3.8"

networks: 
  t2_proxy:
    external: true
  default:
    driver: bridge

secrets:
  openvpn_user:
    file: ${mdsrv_dir}\secrets\glueten\openvpn_user
  openvpn_password:
    file: ${mdsrv_dir}\secrets\glueten\openvpn_password
  IPVanish_username:
    file: ${mdsrv_dir}\secrets\IPVanish\IPVanish_username
  IPVanish_password:
    file: ${mdsrv_dir}\secrets\IPVanish\IPVanish_password
  traefik_admin_password:
    file: ${mdsrv_dir}\secrets\traefik\.htpasswd
  cloudflare_email:
    file: ${mdsrv_dir}\secrets\cloudflare\cloudflare_email
  cloudflare_api_key:
    file: ${mdsrv_dir}\secrets\cloudflare\cloudflare_api_key
  cloudflare_zone_id:
    file: ${mdsrv_dir}\secrets\cloudflare\cloudflare_zone_id
  piholeadmin:
    file: ${mdsrv_dir}\secrets\pihole\piholeadmin
  username:
    file: ${mdsrv_dir}\secrets\transmission\username
  password:
    file: ${mdsrv_dir}\secrets\transmission\password

services:
 # Indexers
  # Radarr – Movie Download and Management
  radarr:
    image: "linuxserver/radarr:nightly"
    hostname: radarr
    container_name: "radarr"
    volumes:
      - ${docker_dir}/radarr:/config # config files
      - ${data_dir}/media/movies:/movies # Media location
      - ${data_dir}/usenet/movies:/data/completed/movies # Usenet download location
      - ${data_dir}/torrents/completed:/data/completed/ # torrent download location
    networks: 
      - t2_proxy
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=002
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.radarr.entryPoints=web
      - traefik.http.routers.radarr.rule=Host(`radarr.${domain}`) 
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878
  
  # Sonarr – TV Show Download and Management
  sonarr:
    image: "linuxserver/sonarr:preview"
    hostname: sonarr
    container_name: "sonarr"
    volumes:
      - ${docker_dir}/sonarr:/config # Config files
      - ${data_dir}/media/tvshows:/tvshows # Media location
      - ${data_dir}/usenet/tv:/data/tv # Usenet download location
      - ${data_dir}/torrents/completed:/data/completed/ # torrents download location
    networks: 
      - t2_proxy
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - UMASK=002
      - TZ=${TZ}
    labels:
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.sonarr.entryPoints=web
      - traefik.http.routers.sonarr.rule=Host(`sonarr.${domain}`) 
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
  
  # Books DOwnload and Management
  lazylibrarian:
    image: linuxserver/lazylibrarian:amd64-latest
    container_name: lazylibrarian
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - DOCKER_MODS=linuxserver/calibre-web:calibre|linuxserver/mods:lazylibrarian-ffmpeg #optional
    volumes:
      - ${docker_dir}/lazylibrarian:/config # COnfig files
      - ${data_dir}/media/books:/books # Media location
      - ${data_dir}/usenet/books:/downloads/usenet # Usenet file location
      - ${data_dir}/torrents/completed:/downloads/torrents # Torrent file location
    networks: 
      - t2_proxy
    restart: always
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.lazylibrarian.entryPoints=web
      - traefik.http.routers.lazylibrarian.rule=Host(`lazylibrarian.${domain}`) 
      - traefik.http.routers.lazylibrarian.service=lazylibrarian
      - traefik.http.services.lazylibrarian.loadbalancer.server.port=5299
  
 # Download Clients
  # UseNet setup
  sabnzbd: 
    image: linuxserver/sabnzbd:latest
    hostname: sabnzbd
    container_name: sabnzbd
    restart: always
    volumes: 
      - ${docker_dir}/sabnzbd:/config
      - ${data_dir}/usenet:/data
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
    networks:
      - t2_proxy
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.sabnzbd.entryPoints=web
      - traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${domain}`) 
      - traefik.http.routers.sabnzbd.service=sabnzbd
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
 
 # Media servers
  # Calibre  – Ebooks and Management (Server)
  calibre:
    image: linuxserver/calibre:latest
    hostname: calibre
    container_name: calibre
    restart: always
    networks: 
      - t2_proxy
    volumes:
      - ${docker_dir}/calibre:/config:rw
      - ${data_dir}:/data:rw
      - ${data_dir}/media/books:/books:rw
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}`
      - UMASK_SET=002 #optional
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.calibre.rule=Host(`read.${domain}`)
      - traefik.http.routers.calibre.entryPoints=web
      - traefik.http.routers.calibre.service=calibre
      - traefik.http.services.calibre.loadbalancer.server.port=8080

  plex:
    image: linuxserver/plex
    container_name: plex
    hostname: plex
    depends_on: 
      - reverse-proxy
    networks:
      - t2_proxy
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}
      - VERSION=docker
      - PLEX_CLAIM=claim-XuUyxZrxfu7qYfsxsxZ4
    volumes: 
      - ${data_dir}\media:/media
      - ${docker_dir}\plex:/config
    restart: always
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.plex.entrypoints=web
      - "traefik.http.routers.plex.tls=false"
      - traefik.http.routers.plex.rule=Host(`plex.${domain}`)
      - traefik.http.routers.plex.service=plex
      - traefik.http.services.plex.loadbalancer.server.port=32400

 # Utilities 
  #Portainer - WebUI for Containers
  portainer:
    image: portainer/portainer:latest
    hostname: portainer
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    networks: 
      - t2_proxy 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${docker_dir}/portainer/data:/data
      - ${docker_dir}/shared:/shared
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.portainer.entryPoints=web
      - traefik.http.routers.portainer.rule=Host(`infra.${domain}`)
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.services.portainer.loadbalancer.server.port=9000

  # Log Management - aggregate logs from all containers 
  dozzle:
    container_name: dozzle
    hostname: dozzle
    image: amir20/dozzle:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks: 
      - t2_proxy 
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.dozzle.entryPoints=web
      - traefik.http.routers.dozzle.rule=Host(`logs.${domain}`)
      - traefik.http.routers.dozzle.service=dozzle
      - traefik.http.services.dozzle.loadbalancer.server.port=8080
  
  # Web Organizer - see all services at a glance
  heimdall:
    image: linuxserver/heimdall:latest
    hostname: heimdall
    container_name: heimdall
    restart: always
    environment: 
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks: 
      - t2_proxy 
    volumes:  
      - ${docker_dir}/heimdall:/config
    labels: 
      - traefik.enable=true
      - traefik.docker.network=t2_proxy
      - traefik.http.routers.heimdall.entryPoints=web
      - traefik.http.routers.heimdall.rule=Host(`home.${domain}`)
      - traefik.http.routers.heimdall.service=heimdall
      - traefik.http.services.heimdall.loadbalancer.server.port=80

  # Watchtower - Automatic Update of Containers/Apps
  watchtower:
    container_name: watchtower
    hostname: watchtower
    restart: always
    image: containrrr/watchtower
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ}
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 0 4 * * *" # Everyday at 4 am
      WATCHTOWER_NOTIFICATIONS_LEVEL: debug
      # DOCKER_HOST: tcp://socket-proxy:2375

  reverse-proxy:
    # The official v2.0 Traefik docker image
    image: traefik:latest
    container_name: traefik
    # Enables the web UI and tells Traefik to listen to docker
    ports:
      # The HTTP port
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      # The Web UI (enabled by --api.insecure=true)
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${docker_dir}\traefik2\rules:/rules
      - ${docker_dir}\traefik2\acme\acme.json:/acme/acme.json
      - ${docker_dir}\traefik2\traefik.yml:/traefik.yml:ro
      - ${docker_dir}\traefik2\traefik.access.log:/traefik.access.log
      - ${docker_dir}\traefik2\traefik.event.log:/traefik.event.log
      - ${docker_dir}\shared\.htpasswd:/shared/.htpasswd
    networks:
      - t2_proxy
    environment: 
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    secrets:
      - cloudflare_email
      - cloudflare_api_key