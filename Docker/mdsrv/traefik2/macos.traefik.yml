api:
  dashboard: true
  debug: true
  insecure: true

certificateResolvers:
  dns-cloudflare:
    acme:
      email: smrtrock@outlook.com
      storage: acme.json
      # LetsEncrypt Staging Server - uncomment when testing
      caServer: https://acme-staging-v02.api.letsencrypt.org/directory
      dnschallenge:
        provider: cloudflare
        delayBeforeCheck: 90
        resolvers:
          - "1.1.1.1:53"
          - "1.0.0.1:53"

entryPoints:
  web:
    address: ":80"
  websecure:
    address: ":443"
    forwardedheaders:
      trustedIPs:
        - 173.245.48.0/20
        - 103.21.244.0/22
        - 103.22.200.0/22
        - 103.31.4.0/22
        - 141.101.64.0/18
        - 108.162.192.0/18
        - 190.93.240.0/20
        - 188.114.96.0/20
        - 197.234.240.0/22
        - 198.41.128.0/17
        - 162.158.0.0/15
        - 104.16.0.0/12
        - 172.64.0.0/13
        - 131.0.72.0/22
  traefik:
    address: ":8080"
  sonarr:
    address: :8989
  radarr:
    address: :7878
  lazylibrarian:
    address: :5299
  jackett: 
    address: :9117
  nzbget:
    address: :6789
  jelly:
    address: :8096
  dozzle: 
    address: :9999
  portainer: 
    address: :9000
  heimdall:
    address: :81
  calibre:
    address: :38080
  hydra:
    address: :5075
  dozzle:
    address: :8081

global:
  checknewversion: true
  # sendanonymoususage: true

log:
  level: DEBUG
  # filepath: /traefik.event.log

accesslog:
  filepath: /traefik.access.log
  bufferingsize: 100
  filters:
    statusCodes: 400-599

http:
  middlewares:
    auth:
      basic-auth:
        user: smrtrock:$apr1$ce8gn68o$v2.a/Mz.HjoMlASielWJ8/
    redirect-to-https:
      redirectscheme: https
      permanent: true
    rate-limit:
      average: 100
      burst: 50
    
  routers:
    api:
      rule: Host(`${traefik_route}.${domain}`)
      entrypoints:
        - traefik
        - web
      services: api@internal
    sonarr:
      rule: Host(`${sonarr_route}.${domain}`)    
      entryPoints:
        - sonarr
      services: sonarr
    radarr:
      rule: Host(`${radarr_route}.${domain}`)
      entryPoints:
        - radarr
    lazylibrarian:
      rule: Host(`${lazylibrarian_route}.${domain}`)
      entryPoints: lazylibrarian
    jackett:
      rule: Host(`${jackett_route}.${domain}`)
      entryPoints: jackett
    nzbget:
      rule: Host(`${nzbget_route}.${domain}`)
      entryPoints: nzbget
    jelly: 
      rule: Host(`${jellyfin_route}.${domain}`)
    dozzle:
      rule: Host(`${dozzle_route}.{domain}`)
      entryPoints: dozzle
    portainer:
      rule: Host(`${portainers_route}.${domain}`)
      entrypoints: portainer
    heimdall:
      rule: rule=Host(`${heimdall_route}.${domain}`)
      entrypoints: heimdall
    calibre:
      rule: Host(`${calibre_route}.${domain}`)
      entrypoints: calibre
    hydra:
      rule: Host(`${hydra_route}.${domain}`)
      entrypoints: hydra
    dozzle: 
      rule: Host(`${dozzle_route}.${domain}`)
      entryPoints: dozzle

providers:
  docker:
    exposedByDefault: false
    swarmMode: false
  file:
    watch: true
    directory: "/rules"
    debugLogGeneratedTemplate: true

serversTransport:
  insecureSkipVerify: true